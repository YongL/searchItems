{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","product","className","name","brand","CardList","products","map","key","id","SearchBox","placeholder","searchChange","type","onChange","App","state","sku","searchField","__handlers","value","target","setState","console","log","this","filteredProducts","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVASeA,G,YANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACX,yBAAKC,UAAU,QACb,8BAAOD,EAAQE,MACf,8BAAOF,EAAQG,UCMJC,G,MARE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACf,yBAAKJ,UAAU,aACZI,EAASC,KAAI,SAAAN,GAAO,OACnB,kBAAC,EAAD,CAAMO,IAAKP,EAAQQ,GAAIR,QAASA,UCAvBS,G,MAJG,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAChB,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCgD5CG,E,YA9Cb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXV,SAAU,CACR,CAAEG,GAAI,KAAMQ,IAAK,WAAYb,MAAO,QAASD,KAAM,UACnD,CAAEM,GAAI,KAAMQ,IAAK,WAAYb,MAAO,QAASD,KAAM,eACnD,CAAEM,GAAI,KAAMQ,IAAK,WAAYb,MAAO,QAASD,KAAM,UACnD,CAAEM,GAAI,KAAMQ,IAAK,WAAYb,MAAO,QAASD,KAAM,eACnD,CAAEM,GAAI,KAAMQ,IAAK,WAAYb,MAAO,OAAQD,KAAM,YAClD,CAAEM,GAAI,KAAMQ,IAAK,WAAYb,MAAO,OAAQD,KAAM,kBAClD,CAAEM,GAAI,KAAMQ,IAAK,WAAYb,MAAO,OAAQD,KAAM,YAClD,CAAEM,GAAI,KAAMQ,IAAK,WAAYb,MAAO,OAAQD,KAAM,mBAEpDe,YAAa,IAGf,EAAKC,WAAa,CAChBP,aAAc,YAA4B,IAAfQ,EAAc,EAAxBC,OAAUD,MACzB,EAAKE,SAAS,CAAEJ,YAAaE,IAC7BG,QAAQC,IAAI,MAAOJ,KAnBX,E,sEAwBL,MAE2BK,KAAKT,MAA/BE,EAFD,EAECA,YACFQ,EAHC,EAEcpB,SACaqB,QAChC,SAAA1B,GAAO,OACLA,EAAQE,KAAKyB,cAAcC,SAASX,EAAYU,gBAChD3B,EAAQG,MAAMwB,cAAcC,SAASX,EAAYU,kBAErD,OACE,yBAAK1B,UAAU,OACb,8CACA,kBAAC,EAAD,CACES,YAAY,kBACZC,aAAca,KAAKN,WAAWP,eAGhC,kBAAC,EAAD,CAAUN,SAAUoB,S,GAzCVI,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef9ea059.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\nconst Card = ({ product }) => (\n  <div className=\"card\">\n    <span>{product.name}</span>\n    <span>{product.brand}</span>\n  </div>\n);\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card/card.js\";\nimport \"./card-list.css\";\n\nconst CardList = ({ products }) => (\n  <div className=\"card-list\">\n    {products.map(product => (\n      <Card key={product.id} product={product} />\n    ))}\n  </div>\n);\n\nexport default CardList;\n","import React from \"react\";\nimport \"./search-box.css\";\n\nconst SearchBox = ({ placeholder, searchChange }) => (\n  <input type=\"search\" placeholder={placeholder} onChange={searchChange} />\n);\n\nexport default SearchBox;\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list/card-list\";\nimport SearchBox from \"./components/search-box/search-box\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      products: [\n        { id: \"01\", sku: \"ELTLW-G1\", brand: \"apple\", name: \"iWatch\" },\n        { id: \"02\", sku: \"ELTLW-G1\", brand: \"apple\", name: \"Macbook Pro\" },\n        { id: \"06\", sku: \"ELTLW-G1\", brand: \"apple\", name: \"iWatch\" },\n        { id: \"07\", sku: \"ELTLW-G1\", brand: \"apple\", name: \"Macbook Pro\" },\n        { id: \"08\", sku: \"ELTLW-G2\", brand: \"dell\", name: \"XPS 5000\" },\n        { id: \"09\", sku: \"ELTLW-G2\", brand: \"dell\", name: \"Alienware 2000\" },\n        { id: \"03\", sku: \"ELTLW-G2\", brand: \"dell\", name: \"XPS 2001\" },\n        { id: \"04\", sku: \"ELTLW-G2\", brand: \"dell\", name: \"Alienware 4000\" }\n      ],\n      searchField: \"\"\n    };\n\n    this.__handlers = {\n      searchChange: ({ target: { value } }) => {\n        this.setState({ searchField: value });\n        console.log(\"...\", value);\n      }\n    };\n  }\n\n  render() {\n    // keep the searchField and do filter here\n    const { searchField, products } = this.state;\n    const filteredProducts = products.filter(\n      product =>\n        product.name.toLowerCase().includes(searchField.toLowerCase()) ||\n        product.brand.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Search Product</h1>\n        <SearchBox\n          placeholder=\"search products\"\n          searchChange={this.__handlers.searchChange}\n        />\n\n        <CardList products={filteredProducts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n// add api endpoint to get products\n// run migration script to add product table\n\n// TODO: recreate that again and push it, verify the page work!\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}